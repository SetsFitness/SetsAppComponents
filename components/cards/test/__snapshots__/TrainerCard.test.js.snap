// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TrainerCard
    rank={1}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    trainer={
      Object {
        "id": "TR0001",
        "name": "Sleeny",
        "profileImage": "thisIsAFakePath/Path",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "centered": true,
      "children": Array [
        <div
          className="u-container"
        >
          <StyledProfileImage
            profileImage="thisIsAFakePath/Path"
            type="LargeCenter"
          />
        </div>,
        <CardContent
          textAlign="center"
        >
          <CardHeader>
            Sleeny
          </CardHeader>
          <CardDescription>
             Personal Trainer
          </CardDescription>
        </CardContent>,
        <CardContent
          extra={true}
          textAlign="center"
        >
          <ButtonGroup
            fluid={true}
          >
            <Button
              as="button"
            >
              <Icon
                as="i"
                name="globe"
              />
               Boston, MA
            </Button>
            <Button
              as="button"
              primary={true}
            >
              Vastus Certified
            </Button>
          </ButtonGroup>
        </CardContent>,
        <Connect(TrainerModal)
          onClose={[Function]}
          open={false}
          trainerID="TR0001"
        />,
      ],
      "fluid": true,
      "onClick": [Function],
      "raised": true,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <StyledProfileImage
            profileImage="thisIsAFakePath/Path"
            type="LargeCenter"
          />,
          "className": "u-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "profileImage": "thisIsAFakePath/Path",
            "type": "LargeCenter",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <CardHeader>
              Sleeny
            </CardHeader>,
            <CardDescription>
               Personal Trainer
            </CardDescription>,
          ],
          "textAlign": "center",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "Sleeny",
            },
            "ref": null,
            "rendered": "Sleeny",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": " Personal Trainer",
            },
            "ref": null,
            "rendered": " Personal Trainer",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ButtonGroup
            fluid={true}
          >
            <Button
              as="button"
            >
              <Icon
                as="i"
                name="globe"
              />
               Boston, MA
            </Button>
            <Button
              as="button"
              primary={true}
            >
              Vastus Certified
            </Button>
          </ButtonGroup>,
          "extra": true,
          "textAlign": "center",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Button
                as="button"
              >
                <Icon
                  as="i"
                  name="globe"
                />
                 Boston, MA
              </Button>,
              <Button
                as="button"
                primary={true}
              >
                Vastus Certified
              </Button>,
            ],
            "fluid": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "button",
                "children": Array [
                  <Icon
                    as="i"
                    name="globe"
                  />,
                  " Boston, MA",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "i",
                    "name": "globe",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                " Boston, MA",
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "button",
                "children": "Vastus Certified",
                "primary": true,
              },
              "ref": null,
              "rendered": "Vastus Certified",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "onClose": [Function],
          "open": false,
          "trainerID": "TR0001",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "centered": true,
        "children": Array [
          <div
            className="u-container"
          >
            <StyledProfileImage
              profileImage="thisIsAFakePath/Path"
              type="LargeCenter"
            />
          </div>,
          <CardContent
            textAlign="center"
          >
            <CardHeader>
              Sleeny
            </CardHeader>
            <CardDescription>
               Personal Trainer
            </CardDescription>
          </CardContent>,
          <CardContent
            extra={true}
            textAlign="center"
          >
            <ButtonGroup
              fluid={true}
            >
              <Button
                as="button"
              >
                <Icon
                  as="i"
                  name="globe"
                />
                 Boston, MA
              </Button>
              <Button
                as="button"
                primary={true}
              >
                Vastus Certified
              </Button>
            </ButtonGroup>
          </CardContent>,
          <Connect(TrainerModal)
            onClose={[Function]}
            open={false}
            trainerID="TR0001"
          />,
        ],
        "fluid": true,
        "onClick": [Function],
        "raised": true,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <StyledProfileImage
              profileImage="thisIsAFakePath/Path"
              type="LargeCenter"
            />,
            "className": "u-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "profileImage": "thisIsAFakePath/Path",
              "type": "LargeCenter",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <CardHeader>
                Sleeny
              </CardHeader>,
              <CardDescription>
                 Personal Trainer
              </CardDescription>,
            ],
            "textAlign": "center",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "Sleeny",
              },
              "ref": null,
              "rendered": "Sleeny",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": " Personal Trainer",
              },
              "ref": null,
              "rendered": " Personal Trainer",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ButtonGroup
              fluid={true}
            >
              <Button
                as="button"
              >
                <Icon
                  as="i"
                  name="globe"
                />
                 Boston, MA
              </Button>
              <Button
                as="button"
                primary={true}
              >
                Vastus Certified
              </Button>
            </ButtonGroup>,
            "extra": true,
            "textAlign": "center",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Button
                  as="button"
                >
                  <Icon
                    as="i"
                    name="globe"
                  />
                   Boston, MA
                </Button>,
                <Button
                  as="button"
                  primary={true}
                >
                  Vastus Certified
                </Button>,
              ],
              "fluid": true,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "as": "button",
                  "children": Array [
                    <Icon
                      as="i"
                      name="globe"
                    />,
                    " Boston, MA",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "as": "i",
                      "name": "globe",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  " Boston, MA",
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "as": "button",
                  "children": "Vastus Certified",
                  "primary": true,
                },
                "ref": null,
                "rendered": "Vastus Certified",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "onClose": [Function],
            "open": false,
            "trainerID": "TR0001",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
